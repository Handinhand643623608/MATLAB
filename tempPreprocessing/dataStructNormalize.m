function dataStruct = dataStructNormalize(dataStruct, varargin)
%DATASTRUCTNORMALIZE
%
%   SYNTAX:
%   dataStruct = dataStructNormalize(dataStruct, 'PropertyName', PropertyValue...)
%   dataStruct = dataStructNormalize(dataStruct, paramStruct.Normalization)
%
%   OUTPUT:
%   dataStruct:
%
%   INPUT:
%   dataStruct:
%
%   OPTIONAL INPUTS:
%   'AmtRegularization':
%
%   'BoundingBox':
%   
%   'DCTCutoff':
%   
%   'Interpolation':
%
%   'Masking':
%
%   'NormPrefix':
%
%   'NumIterations':
%
%   'Preservation':
%
%   'RegPrefix':
%   
%   'Regularization':
%
%   'SourceSmoothing':
%   
%   'TemplateImage':
%   
%   'TemplateSmoothing':
%
%   'TemplateWeightImage':
%
%   'VoxelSize':
%
%   'Wrapping':
%
%   Written by Josh Grooms on 20130703


%% Initialize
% Initialize defaults & settings
if isstruct(varargin{1})
    assignInputs(varargin{1}, 'varsOnly')
else
    inSruct = struct(...
        'AmtRegularization', 1,...
        'BoundingBox', [-78 -112 -50; 78 76 85],...
        'DCTCutoff', 25,...
        'Interpolation', 1,...
        'Masking', false,...
        'NormPrefix', 'w',...
        'NumIterations', 16,...
        'Preservation', 0,...
        'RegPrefix', 'r',...
        'Regularization', 'mni',...
        'SourceSmoothing', 8,...
        'TemplateImage', {{[dataStruct.Files.MNIBrain ',1']}},...
        'TemplateSmoothing', 0,...
        'TemplateWeightImage', {''},...
        'VoxelSize', [2 2 2],...
        'Wrapping', [0 0 0]);
    assignInputs(inStruct, varargin)
end    
    
% Pull information from the data structure
imgFolder = dataStruct.Files.IMGFolder;
searchStr = dataStruct.Files.IMG.Registered.FunctionalStr;
functionalFiles = get(fileData(imgFolder, 'ext', '.img', 'search', searchStr), 'Path');
segmentsFiles = dataStruct.Files.IMG.Segments;
biasCorImage = {dataStruct.Files.IMG.BiasCorrected};
regMeanImage = {dataStruct.Files.IMG.Registered.Mean};

% Compile a list of images for SPM
resampleImages = cat(1, biasCorImage, regMeanImage, segmentsFiles, functionalFiles);
resampleImages = cellfun(@(x) [x ',1'], resampleImages, 'UniformOutput', false);

% Initialize the SPM normalization batch processing
normBatch{1}.spm.spatial.normalise.estwrite = struct(...
    'eoptions', struct(...
        'regtype', Regularization,...
        'smoref', TemplateSmoothing,...
        'smosrc', SourceSmoothing,...
        'template', {TemplateImage},...
        'weight', TemplateWeightImage),...
    'roptions', struct(...
        'bb', BoundingBox,...
        'interp', Interpolation,...
        'prefix', NormPrefix,...
        'preserve', Preservation,...
        'vox', VoxelSize,...
        'wrap', Wrapping),...
    'subj', struct(...
        'resample', {resampleImages},...
        'source', {{[dataStruct.Files.IMG.BiasCorrected ',1']}},...
        'wtsrc', ''));
    
% Initialize the SPM coregistration batch processing
regBatch{1}.spm.spatial.coreg.write = struct(...
    'ref', {TemplateImage},...
    'roptions', struct(...
        'interp', Interpolation,...
        'mask', Masking,...    
        'prefix', RegPrefix,...
        'wrap', Wrapping),...
    'source', []);


%% Run SPM Normalization
% Normalize to the template image
normOutput = spm_jobman('run', normBatch);
regBatch{1}.spm.spatial.coreg.write.source = normOutput{1}.files;
regOutput = spm_jobman('run', regBatch);
regOutput{1}.rfiles = regexprep(regOutput{1}.rfiles, ',1', '');


%% Store Information in Data Structure
dataStruct.Files.IMG.Normalized = struct(...
    'BiasCorrected', regOutput{1}.rfiles{1},...
    'Mean', regOutput{1}.rfiles{2},...
    'Segments', {regOutput{1}.rfiles(3:5)});
dataStruct.Files.IMG.Normalized.FunctionalStr = [RegPrefix NormPrefix searchStr];