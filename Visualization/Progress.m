%% PROGRESS - A simple and fancy progress bar used to monitor the progress of tasks.
%
%	Progress Properties:
%		Complete	- The percentage of a task completed.
%
%	Progress Constructor:
%		Progress	- Constructs a new Progress object window with one or more titled progress bars.
%
%	Progress Methods:
%		AddBar		- Adds a new progress bar to an existing Progress object window.
%		Close		- Closes a Progress object window.
%		RemoveBar	- Removes the last progress bar from an existing Progress object window.
%		Reset		- Resets one or more progress bars to 0% completion within a Progress object window.
%		Title		- Changes the title of a progress bar within a Progress object window.
%		Update		- Changes the completion percentage of a progress bar within a Progress object window.


%% CHANGELOG
%   Written by Josh Grooms on 20130215
%       20130801:   Updated entire object to be compatible with the re-write of WINDOWOBJ. Removed the "Shimmer" property 
%					(I don't think this is doable elegantly in MATLAB). Removed changelog entries (see SVN for the complete 
%					listing).
%       20130803:   Users may now only input bar titles (others were never really used). Added a settings method so users can
%					change the default color scheme.
%       20130804:   Implemented estimated time remaining for overall progress.
%       20140806:   Completed a major overhaul of this program. Completely reorganized the class and removed public access to
%					several properties and methods. Incorporated compatibility with the upcoming WINDOW class update.
%					Implemented the ability to dynamically add and remove bars from an existing window. Rewrote and cleaned 
%					up basically every method and placed them here in the definition file. Removed several methods and added 
%					several new ones. Removed all use of property change listeners.
%       20140829:   Bug fix for the close method still calling WINDOWOBJ instead of WINDOW. Bug fix for fast progress bar 
%					(i.e. with animation turned off) not working. Removed some unnecessary code. Implemented a default bar 
%					title when adding new bars dynamically to prevent erroring out. Updated documentation to discuss the
%                   '-fast' option.
%		20141124:	Updated for compatibility with the latest change to the Window class.
%		20141212:	Changed the name of the "close" method to "Close" for compatibility with that same recent change to the 
%					Window class.
%       20150128:   Removed the Patch property from this class because I added it to the Window superclass.
%       20150207:   Implemented auto-closing of the progress bar once completion in the first bar reaches 100%. Also
%                   implemented a new input option '-persist' to turn this feature off, but it is now enabled by default.
%                   Updated the documentation accordingly.
%		20150509:	Overhauled the class documentation to summarize all of the properties and methods that are available.



%% CLASS DEFINITION
classdef Progress < Window



    %% DATA
    properties (AbortSet)
        Complete					% The percentage of a task completed.
    end
    
    properties (Access = private, Hidden)
        AutoClose    @logical		% A Boolean controlling window closing once 100% completion is reached.
        Clock						% Parameters relating to the estimation of remaining time.
        UseAnimation @logical		% A Boolean representing whether or not smooth animations are to be used.
    end
    
    
    
    %% CONSTRUCTOR
    methods
		function P = Progress(varargin)
		% PROGRESS - Constructs a new Progress object window with one or more titled progress bars.
		%
		%   This object is a replacement progress bar for the MATLAB built-in "waitbar" and others that might be found on
		%   file-exchange. Unlike others, this progress bar uses multiple colors and smooth movements (with acceleration
		%   effects). It is designed primarily for use in tracking progress through FOR loops.
		%   
		%   Multiple progress bars inside of a single window can be generated by inputting more than one bar title. This is
		%   useful when tracking the progress of multiple nested loops. Each individual bar can be controlled independently
		%   of one another.
		%
		%   Multiple windows may also be generated, each containing one or more progress bars. Window position is calculated
		%   automatically so that individual windows do not overlap. This is useful for tracking progress in subfunctions
		%   while another window tracks progress in the caller (super) function. All windows and individual bars can be
		%   controlled independently of one another.
		%
		%   SYNTAX:
		%   P = Progress(barTitle)
		%   P = Progress(barTitle1, barTitle2,...)
		%   P = Progress('-fast',...)
		%   P = Progress('-persist',...)
		%
		%   OUTPUT:
		%   P:                  PROGRESS
		%                       The handle of the progress bar object. To get the object properties, type the chosen output
		%                       variable name in the console or, for more advanced properties, use the GET command on the
		%                       object.
		%
		%   OPTIONAL INPUTS:
		%   '-fast':            VERBATIM
		%                       If the first input in the call to create a new progress bar is the string '-fast' (exactly as
		%                       shown here), then the animation that appears to smoothly advance the progress bar will be
		%                       turned off. This may be helpful in situations where you are unsure of the required time for a
		%                       process or you wish to monitor the progress of a fairly rapid procedure. In such cases, the
		%                       animation can introduce a considerable delay to your program and should be disabled.
		%
		%   '-persist':         VERBATIM
		%                       If any of the input arguments match the string '-persist' (exactly as shown here), then the
		%                       progress bar will not automatically close when the primary (i.e. the first) bar reaches 100%.
		%                       By default, progress bar windows close automatically when the primary task finishes, which
		%                       prevents having to call the CLOSE method manually for every object created.
		%   
		%   barTitle:           STRING or STRINGS
		%                       A string (or multiple strings separated by commas) represeting the label to be applied to
		%                       individual progress bars. The number of bar titles corresponds to the number of bars that are
		%                       generated (i.e. three bar titles will result in three bars being generated).
		%
		%	See also: PROGRESS.ADDBAR, PROGRESS.REMOVEBAR, PROGRESS.RESET, PROGRESS.TITLE, PROGRESS.UPDATE
			
            P = P@Window(...
                'Background',	Colors.Black,...
                'Colormap',		Colormaps.Cool,...
                'FigureNumber', 1000,...
                'MenuBar',		'none',...
                'NumberTitle',	'off',...
                'Name',			'Progress',...
                'Position',		WindowPositions.UpperRight,...
                'Resize',		'on',...
                'Size',			[500, 100]);
            
			P.AutoClose = true;
			P.UseAnimation = true;
			
            currentTime = now;
            P.Clock.Average = currentTime;
            P.Clock.LastTime = currentTime;
            P.Clock.NumIterations = 0;
            P.Text = struct('BarText', [], 'BarTitle', []);
            
			if nargin == 0; AddBar(P, 'Progress');
            else 
                for a = 1:length(varargin)
                    switch lower(varargin{a})
                        case '-fast'
                            P.UseAnimation = false;
                        case '-persist'
                            P.AutoClose = false;
                        otherwise
                            AddBar(P, varargin{a});
                    end
                end
			end
			
			drawnow;
        end
    end
    
    
    
    %% UTILITIES
    methods
        % Class methods
        function AddBar(P, barTitle)
		% ADDBAR - Adds a new progress bar to an existing Progress object window.
		%
		%	SYNTAX:
		%		P.AddBar()
		%		P.AddBar(barTitle)
		%
		%	INPUT:
		%		P:			PROGRESS
		%					A handle to an existing Progress object window in which a new bar will be added.
		%	
		%	OPTIONAL INPUT:
		%		barTitle:	STRING
		%					The title to be applied to the newly created progress bar.
		%					DEFAULT: 'Progress'
		%
		%	See also: PROGRESS.REMOVEBAR
            
            if nargin == 1; barTitle = 'Progress'; end
            innerFigPos = get(P.FigureHandle, 'Position');
            if isempty(P.Axes)
                newAxPos = [0.01*innerFigPos(3), 0.01*innerFigPos(4), 0.88*innerFigPos(3), 0.5*innerFigPos(4)];
            else
                newAxPos = get(P.Axes(end), 'Position');
                innerFigPos(4) = (innerFigPos(4)/length(P.Axes)) + innerFigPos(4);
                set(P.FigureHandle, 'Position', innerFigPos);
                P.TranslateBarPositions(2*newAxPos(4));
            end
            
            P.Axes = cat(1, P.Axes, Progress.NewAxes(P.FigureHandle, newAxPos));
            P.Complete = cat(1, P.Complete, 0);
            P.Patch = cat(1, P.Patch, Progress.NewBar(P.Axes(end)));
            P.Text.BarTitle = cat(1, P.Text.BarTitle, Progress.NewTitle(P.Axes(end), barTitle));
            P.Text.BarText = cat(1, P.Text.BarText, Progress.NewText(P.Axes(end), [max(get(P.Patch(end), 'XData')) + 1, 0]));
            P.Position = WindowPositions.UpperRight;
        end
        function RemoveBar(P)
		% REMOVEBAR - Removes the last progress bar from an existing Progress object window.
		%
		%	SYNTAX:
		%		P.RemoveBar()
		%
		%	INPUT:
		%		P:		PROGRESS
		%				A handle to an existing Progress object window in which the last-added bar will be removed.
		%
		%	See also: PROGRESS.ADDBAR
		
            origNumBars = length(P.Axes);
            delete(P.Patch(end));           P.Patch(end) = [];
            delete(P.Text.BarText(end));    P.Text.BarText(end) = [];
            delete(P.Text.BarTitle(end));   P.Text.BarTitle(end) = [];
            delete(P.Axes(end));            P.Axes(end) = [];
            
            innerFigPos = get(P.FigureHandle, 'Position');
            TranslateBarPositions(P, -(innerFigPos(4) / origNumBars));
            innerFigPos(4) = innerFigPos(4) - (innerFigPos(4) / origNumBars);
            set(P.FigureHandle, 'Position', innerFigPos);
            P.Position = WindowPositions.UpperRight;
        end
        function Reset(P, idxBar)
		% RESET - Resets one or more progress bars to 0% completion within a Progress object window.
		%
		%	SYNTAX:
		%		P.Reset()
		%		P.Reset(idxBar)
		%
		%	INPUT:
		%		P:			PROGRESS
		%					A handle to an existing Progress object window in which bars are to be reset.
		%
		%	OPTIONAL INPUTS:
		%		idxBar:		INTEGER
		%					The integer index of the progress bar to be reset. Acceptable indices start at 1 (the upper-most
		%					bar) and extend through N (the Nth or bottom-most bar present in the window).
		%					DEFAULT: 1
		%
		%	See also: PROGRESS.UPDATE
		
            if nargin == 1; idxBar = 1; end
            Update(P, idxBar, 0);
        end
        function Title(H, idxBar, barTitle)
		% TITLE - Change the title of a progress bar.
            set(H.Text.BarTitle(idxBar), 'String', barTitle);
        end
        function Update(H, varargin)
        % UPDATE - Changes the completion percentage of a progress bar within a Progress object window.
		%
		%	SYNTAX:
		%		P.Update(pct)
		%		P.Update(idxBar, pct)
		%
		%	INPUTS:
		%		P:			PROGRESS
		%					A handle to an existing Progress object window in which bars are to be updated.
		%
		%		pct:		DOUBLE
		%					The new fractional completion value for a progress bar. This argument should take the form of a
		%					decimal number between [0, 1] where 0 indicates 0% completion and 1 indicates 100% completion.
		%
		%	OPTIONAL INPUT:
		%		idxBar:		INTEGER
		%					The integer index of the progress bar to be updated. Acceptable indices start at 1 (the
		%					upper-most bar) and extend through N (the Nth or bottom-most bar present in the window).
		%					DEFAULT: 1
		%
		%	See also: PROGRESS.RESET
		
            if nargin == 2
                idxBar = 1;
                pctComplete = varargin{1};
            else
                idxBar = varargin{1};
                pctComplete = varargin{2};
            end
            
            if (pctComplete > 1); pctComplete = 1;
            elseif (pctComplete < 0); pctComplete = 0;
            end
            
            if (H.UseAnimation); UpdateAnimated(H, idxBar, pctComplete);
            else UpdateInstantly(H, idxBar, pctComplete); end
            
            if (idxBar == 1) && (pctComplete ~= 0); UpdateTimeRemaining(H, pctComplete); end
                
            H.Complete(idxBar) = pctComplete*100;
            if (H.AutoClose && H.Complete(1) >= 100); H.Close(); end
        end
        
        % Overloaded MATLAB methods
        function Close(P, varargin)
		% CLOSE - Closes a Progress object window.
		%
		%	This method closes the MATLAB figure containing the progress bars and deletes all references to them. Ordinarily,
		%	there will be no need to manually invoke CLOSE because Progress objects destroy themselves when their first bar
		%	reaches 100% completion. However, automatic closing behavior can be overridden by using the '-persist' option
		%	when constructing new Progress objects, in which case this method must be called manually.
		%
		%	SYNTAX:
		%		P.Close()
		%
		%	INPUT:
		%		P:		PROGRESS
		%				A handle to an existing Progress object window that will be closed.
		%
		%	See also: PROGRESS.PROGRESS
            evalin('caller', ['clear ' inputname(1)]);
            Close@Window(P, varargin{:});
        end
    end
    
    
    
    %% PRIVATE UTILITIES
    methods (Access = private)
        function TranslateBarPositions(H, deltaY)
		% TRANSLATEBARPOSITIONS - Moves progress bars up or down within a window as other bars are added or removed.
		
            for a = 1:length(H.Axes)
                newBarPos = get(H.Axes(a), 'Position');
                newBarPos(2) = newBarPos(2) + deltaY;
                set(H.Axes(a), 'Position', newBarPos);
            end
        end
        function UpdateAnimated(H, idxBar, pctComplete)
		% UPDATEANIMATED - Updates the width and completion text for a single progress bar in several animated steps.
		
            % Calculate how far to advance the progress bar
            textPos = get(H.Text.BarText(idxBar), 'Position');
            xVertices = get(H.Patch(idxBar), 'XData');
            idxCap2 = 0.5*length(xVertices) + 1;
            diffPos = round(pctComplete*100) - xVertices(idxCap2);
            
            % Smoothly advance the progress bar & associated text
            movements = gausswin(50, 1/0.4);
            movements = movements.*(diffPos/sum(movements));
            for a = 1:length(movements)
                xVertices(idxCap2:end) = xVertices(idxCap2:end) + movements(a);
                textPos(1) = textPos(1) + movements(a);
                H.Complete(idxBar) = H.Complete(idxBar) + movements(a);
                newText = sprintf('%3.1f%%', H.Complete(idxBar));
                
                if (length(newText) >= 4) && (newText(4) == '.')
                    newText(4:5) = [];
                end
                
                set(H.Patch(idxBar), 'XData', xVertices);
                set(H.Text.BarText(idxBar), 'Position', textPos, 'String', newText);
                pause(0.0001);
            end
        end
        function UpdateInstantly(H, idxBar, pctComplete)
		% UPDATEINSTANTLY - Instantly updates the width and completion text for a single progress bar, forgoing animation.
		
            % Calculate how far to advance the progress bar
            xVertices = get(H.Patch(idxBar), 'XData');
            idxCap2 = 0.5*length(xVertices) + 1;
            diffPos = round(pctComplete*100) - xVertices(idxCap2);
            xVertices(idxCap2:end) = xVertices(idxCap2:end) + diffPos;
            
            % Advance the progress bar & associated text
            set(H.Patch(idxBar), 'XData', xVertices);
            textPos = get(H.Text.BarText(idxBar), 'Position');
            textPos(1) = textPos(1) + diffPos;
            newText = sprintf('%3.1f%%', pctComplete*100);
            if newText(end) == '.'; newText(end) = []; end
            set(H.Text.BarText(idxBar), 'Position', textPos, 'String', newText);
            drawnow;
        end
        function UpdateTimeRemaining(H, pctComplete)
		% UPDATETIMEREMAINING - Updates the estimated remaining time for the first bar to reach 100%.
		
            currentTime = now;
            iterTime = currentTime - H.Clock.LastTime;
            numIterations = H.Clock.NumIterations + 1;
            avgIterTime = (iterTime + H.Clock.NumIterations * H.Clock.Average) / numIterations;
            itersRemaining = round(numIterations/pctComplete) - numIterations;
            timeRemaining = avgIterTime * itersRemaining;
            
            H.Clock.NumIterations = numIterations;
            H.Clock.LastTime = currentTime;
            H.Clock.Average = avgIterTime;
            H.Name = Progress.TimeStr(timeRemaining);
        end     
    end
    
    methods (Access = private, Static)
        % New progress bar elements
        function a = NewAxes(f, position)
        % NEWAXES - Creates new axes to contain the progress bar drawing.
            a = axes(...
                'Units', 'pixels',...
                'Color', 'k',...
                'Parent', f,...
                'Position', position,...
                'XLim', [-4, 104],...
                'XTick', [],...
                'YLim', [-1.25, 1.25],...
                'YTick', []);
        end
        function b = NewBar(a)
		% NEWBAR - Create a new progress bar patch object.
            theta1 = linspace(pi/2, 3*pi/2, 100);
            circleX1 = 3*cos(theta1);
            circleY1 = 0.85*sin(theta1);
            theta2 = linspace(-pi/2, pi/2, 100);
            circleX2 = max(circleX1) + 3*cos(theta2);
            circleY2 = 0.85*sin(theta2);
            
            b = patch([circleX1, circleX2], [circleY1, circleY2], 1:length([circleX1, circleX2]),...
                'FaceColor', 'interp',...
                'EdgeColor', 'none',...
                'Parent', a);
        end
        function t = NewText(a, position)
        % NEWTEXT - Creates new text for diplaying the completion percentage of a progress bar.
            t = text(...
                'Units', 'data',...
                'Color', 'w',...
                'FontSize', 10,...
                'FontWeight', 'bold',...
                'HorizontalAlignment', 'left',...
                'Parent', a,...
                'Position', position,...
                'String', '0.0%');
        end
        function t = NewTitle(a, str)
        % NEWTITLE - Creates new text for displaying the title of a progress bar.
            t = text(...
                'Units', 'data',...
                'Color', 'w',...
                'FontSize', 12,...
                'FontWeight', 'bold',...
                'Parent', a,...
                'Position', [-3, 2.25],...
                'String', str);
        end
        
        % Other functions
        function timeStr = TimeStr(timeNum)
        % TIMESTR - Converts estimated time remaining into a string used for the window title.
            warning('off', 'MATLAB:callback:error');
            timeStr = datestr(timeNum, 'DDHHMMSS');
            timeCell = {timeStr(1:2), 'days', timeStr(3:4), 'hrs', timeStr(5:6), 'min', timeStr(7:8), 's'};
            
            while true
                if isempty(timeCell)
                    timeStr = 'Done!';
                    return;
                elseif strcmpi(timeCell{1}, '00'); 
                    timeCell(1:2) = [];
                    continue;
                else
                    printStr = repmat('%s ', 1, length(timeCell));
                    timeStr = sprintf([printStr 'Remaining'], timeCell{:});
                    return;
                end
            end
        end
    end
    
    
    
end
    
    
        