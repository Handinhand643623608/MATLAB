function u_dataMontage(inData, varargin)
%U_DATAMONTAGE
% 
% 
%   Syntax:
% 
% 
%   OUTPUTS:
% 
% 
%   PROPERTY NAMES:
%   inData:
% 
%   ('axesColor'):
% 
%   ('backgroundColor')
% 
%   ('circleColor')
%   ('colorBounds')
%   ('colorMap')
%   ('dataType')
%   ('eegLabels')
%   ('figurePosition')
%   ('figureSize')
%   ('fontAngle')
%   ('fontColor')
%   ('fontSize')
%   ('fontWeight')
%   ('NaNColor')
%   ('plotTitle')
%   ('spacing')
%   ('visibleCBar')
%   ('visibleFigs')
%   ('xMontageData')
%   ('xTitle')
%   ('xTickLabels')
%   ('yMontageData')
%   ('yTitle')
%   ('yTickLabels')
% 
%   Written by Josh Grooms on 20130127
% 
% 
%% Initialize
% Initialize the defaults structure
szData = size(inData);
inStruct = struct(...
    'axesColor', 'k',...
    'backgroundColor', [0.8 0.8 0.8],...
    'circleColor', 'k',...    
    'colorBounds', [-1 1],...
    'colorMap', jet(256),...
    'dataType', 'MRI',...
    'eegLabels', [],...
    'figurePosition', 'right-center',...    
    'figureSize', 'fullScreen',...    
    'fontAngle', 'normal',...
    'fontColor', 'k',...
    'fontSize', 10,...
    'fontWeight', 'bold',...
    'anatomicalImage', [],...
    'maskThresholds', [],...
    'NaNColor', [0 0 0],...
    'plotTitle', [],...    
    'spacing', 0.1,...
    'visibleCBar', 'on',...
    'visibleFigs', 'on',...
    'xMontageData', [1:szData(end - 1)],...
    'xTitle', [],...
    'xTickLabels', [1:szData(end - 1)],...
    'yMontageData', [1:szData(end)],...
    'yTitle', [],...
    'yTickLabels', [1:szData(end)]);
assignInputs(inStruct, varargin, {'dataType'}, 'upper(varPlaceholder)');

% Y-Tick labels are reversed if not provided in a top-down order (with respect to the plot)
if isvector(yTickLabels) && ~iscolumn(yTickLabels)
    yTickLabels = yTickLabels';
end
yTickLabels = flipdim(yTickLabels, 1);


switch dataType
    %% MRI Data
    case 'MRI'
        % Condition the input data
        inData(inData == 0) = NaN;
        
        % Account for the need to threshold the data
        if ~isempty(anatomicalImage) && ~isempty(maskThresholds)
            % Combine color & grayscale images
            anatomicalImage(anatomicalImage == 0) = NaN;
            anatomicalImage = repmat(anatomicalImage, [1, 1, 1, length(yMontageData)]);
            anatomicalImage(inData < maskThresholds(1) | inData > maskThresholds(2)) = NaN;
            inData(inData >= maskThresholds(1) & inData <= maskThresholds(2)) = NaN;
            anatomicalImage = scale2rgb(anatomicalImage, 'colorMap', gray(256), 'NaNColor', NaNColor);
            inData = scale2rgb(inData, 'colorMap', colorMap, 'NaNColor', NaNColor, 'dataRange', colorBounds);
            
            rgbData = anatomicalImage + inData;
        
        else
            % Scale magnitude values to 256-level Jet colormap
            rgbData = scale2rgb(inData, 'colorMap', colorMap, 'NaNColor', NaNColor, 'dataRange', colorBounds);
            
        end
        
        % Scaling places RGB values in the last dimension: adjust dimensions
        rgbData = permute(rgbData, [2 1 5 3 4]);         % <--- Transpose (move 2 to 1) so images are oriented correctly        
        
        % Create the images
        figureHandles = zeros(length(yMontageData), length(xMontageData));
        axesHandles = zeros(length(yMontageData), length(xMontageData));
        for i = yMontageData
            for j = xMontageData
                figureHandles(i, j) = figure('Visible', 'off');
                image(rgbData(:, :, :, j, i))
                axesHandles(i, j) = gca;
                set(gca, 'YDir', 'normal');
            end
        end
        
        
    %% EEG Data
    case 'EEG'
        if isempty(eegLabels)
            error('When creating a montage with EEG data, the data set''s EEG labels must also be supplied')
        end
        
        % Generate EEG images        
        figureHandles = zeros(length(yMontageData), length(xMontageData));
        axesHandles = zeros(length(yMontageData), length(xMontageData));
        progressbar('EEG-IC Components Imaged', 'EEG-IC Time Shifts Imaged')
        for i = yMontageData
            progressbar([], 0)
            for j = xMontageData
                [figureHandles(i, j), axesHandles(i, j)] = u_colormap_EEG(inData(:, j, i), eegLabels,...
                    'colorMap', colorMap,...
                    'colorBounds', colorBounds,...
                    'figureSize', 'default',...
                    'visibleCBar', 'off',...
                    'visibleFigs', 'off',...
                    'visibleFonts', 'off');
                progressbar([], j/length(xMontageData))
            end
            progressbar(i/length(yMontageData), [])
        end
end

%% Make a Montage of the Data
[figureHandle, primaryAxis, subAxes, szElement] = createMontage(axesHandles, figureHandles,...
    'axesColor', axesColor,...
    'backgroundColor', backgroundColor,...
    'colorBar', visibleCBar,...
    'colorBounds', colorBounds,...
    'colorMap', colorMap,...
    'figurePosition', figurePosition,...    
    'figureSize', 'default',...    
    'numRows', length(yMontageData),...
    'numColumns', length(xMontageData),...
    'spacing', spacing,...
    'visibleCBar', visibleCBar,...    
    'visibleFigs', visibleFigs);

% Apply figure labels
[txtHandles, titleHandles] = labelFigure(...
    'axisHandle', primaryAxis,...
    'figureHandle', figureHandle,...
    'plotTitle', plotTitle,...
    'plotTitleColor', fontColor,...
    'plotTitleFontSize', fontSize + 4,...
    'tickDir', 'off',...
    'xColor', fontColor,...
    'xFontAngle', fontAngle,...    
    'xFontSize', fontSize,...
    'xFontWeight', fontAngle,...
    'xLabels', xTickLabels,...
    'xRotation', 0,...
    'xSide', 'bottom',...
    'xTitle', xTitle,...
    'xTitleFontSize', fontSize + 2,...
    'yColor', fontColor,...
    'yFontAngle', 'normal',...    
    'yFontSize', fontSize,...
    'yFontWeight', 'normal',...
    'yLabels', yTickLabels,...
    'yRotation', 0,...
    'ySide', 'left',...
    'yTitle', yTitle,...
    'yTitleFontSize', fontSize + 2);

% Resize the montage to fullscreen
createFigure(...
    'editFigure', figureHandle,...
    'backgroundColor', backgroundColor,...
    'figureSize', figureSize,...
    'visible', visibleFigs);
    


    
    






