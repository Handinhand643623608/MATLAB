classdef BrainPlot < Window
%BRAINPLOT Displays data in an EEG- or fMRI-style plot or montage of plots.
%   This object displays EEG or MRI data in a montage. It accepts 3-4D MRI images and 2-3D EEG data arrays, as described
%   below. For MRI data, data are displayed as color-coded images. EEG data is displayed as a color-coded scaled spatial
%   layout of EEG electrodes.
%
%   SYNTAX:
%   brainData = brainPlot(plotType, plotData, 'PropertyName', PropertyValue...)
%
%   OPTIONAL OUTPUT:
%   brainData:              BRAINPLOT
%                           A handle to the outputted data object containing all necessary information to create an
%                           image montage. This output is optional.
%
%   INPUTS:
%   plotType:               STRING
%                           The type of plot to be generated by the function (either EEG electrode spatial maps or MRI
%                           colored images. This variable is case insensitive.
%                           OPTIONS:
%                               'EEG'
%                               'MRI'
%
%   plotData:               2D, 3D, or 4D ARRAY
%                           The data to be plotted. Data must be the specified format to work with this object. MRI data
%                           can be 2, 3, or 4 dimensional. EEG data can be either 1, 2, or 3 dimensional. Threshold data
%                           by setting insignificant values to NaN.

%                           OPTIONS:
%                               MRI Data:
%                               [X, Y]          - A single 2D MRI image.
%                               [X, Y, Z]       - A single 3D MRI image. Slices will be plotted vertically unless 
%                                                 specified using 'XDim' and 'YDim' properties.
%                               [X, Y, Z, Var1] - 3D MRI images across some variable (e.g. time). Slices will be plotted 
%                                                 vertically and the 4th dimension will be plotted horizontally, unless
%                                                 otherwise specified.
%
%                               EEG Data:
%                               [C]             - A vector of data (one point per channel).
%                               [C, Var1]       - An array of data where each row corresponds to a single channel's data 
%                                                 across some other variable (e.g. time or time shift). The second
%                                                 dimension will be plotted horizontally unless otherwise specified
%                                                 using 'XDim' and 'YDim'.
%                               [C, Var1, Var2] - EEG data across two variables. Each column of the array will be 
%                                                 plotted horizontally and each page will be plotted veritcally, unless
%                                                 otherwise specified.
%
%   OPTIONAL INPUTS:
%   'Anatomical':           3D ARRAY
%                           An anatomical (T1) 3D image. Input these data in the same spatial format as the "plotData"
%                           parameter, with the same number of slices. The anatomical image will be displayed on
%                           thresholded data in place of values that do not pass significance testing.
%                           DEFAULT: []
%
%   'AxesColor':            STRING or [DOUBLE, DOUBLE, DOUBLE]
%                           The color of the bounding axes box and all associated text. Acceptable inputs include
%                           standard MATLAB string color specifiers or a vector of RGB values.
%                           DEFAULT: 'w' OR [1 1 1]
%
%   'Channels':             {STRINGS}
%                           A cell array of EEG channel labels in the same ordering as the first dimension of the input
%                           data array. If calling for an MRI plot, this variable is not used.
%                           DEFAULT: all 68 EEG channels in standard ordering (found in eegChannels.mat)
%   
%   'CLim':                 [DOUBLE, DOUBLE]
%                           A two-element vector specifying the [MIN MAX] in data units to be 
%                           mapped to color extremes. By default, this parameter is calculated 
%                           automatically using absolute data extremes. 
%                           DEFAULT: []
%
%   'Color':                STRING or [DOUBLE DOUBLE DOUBLE]
%                           The background color of the figure and all axes. Acceptable inputs include standard MATLAB
%                           string color specifiers or a vector of RGB values.
%                           DEFAULT: 'k' OR [0 0 0]
%
%   'Colorbar':             BOOLEAN
%                           A Boolean controlling whether or not a colorbar is present on the figure.
%                           DEFAULT: true
%                           OPTIONS: true OR false OR 'on' OR 'off'
%
%   'ColorbarLabel':        STRING
%                           The vertical text label for the colorbar.
%                           DEFAULT: []
%
%   'Colormap':             COLORMAP
%                           The colormap being utilized by the figure.
%                           DEFAULT: jet(256)
%
%   'Position':             STRING or [INTEGER, INTEGER]
%                           A string (or actual numerical position in pixels, if you want) indicating the position of
%                           the window on-screen. This parameter is highly flexible, and ordering does not matter. Any
%                           combination of strings from the options below (one specifying a vertical and another
%                           specifying a horizontal position, separated by a hyphen) will work. This has no effect when
%                           the window size is set to "fullscreen".
%                           DEFAULT: 'top-right' 
%                           OPTIONS: 
%                               Numerical:
%                               [X, Y] - Specifying the X and Y position (in pixels) of the lower left window corner.
%                               
%                               Strings:
%                               'left'   OR 'west'
%                               'right'  OR 'east'
%                               'top'    OR 'upper' OR 'north'
%                               'middle' OR 'center'
%                               'bottom' OR 'lower' OR 'south'
%
%   'Size':                 STRING or [INTEGER, INTEGER]
%                           A string (or actual numerical size in pixels, if you want) indicating the size of the window
%                           on-screen. This parameter is flexible, and several options will work. 
%                           DEFAULT: 'fullscreen'
%                           OPTIONS:
%                               Numerical:
%                               [X, Y] - Specifying the width and height (in pixels) of the entire figure window
%                                        (including borders). The figure window will automatically reposition itself to
%                                        fit on-screen if this input extends the window beyond.
%
%                               Strings:
%                               'default'               - The MATLAB default window size.
%                               'halfscreen' OR 'half'  - Window will fill half of the
%                                                         horizontal screen space.
%                               'fullscreen' OR 'full'  - Window will fill the whole screen.
%
%   'Threshold':            [DOUBLE, DOUBLE]
%   
%   'Title':                STRING
%                           The plot title string.
%                           DEFAULT: []
%
%   'Visible':              BOOLEAN
%                           A boolean indicating whether or not the figure is visible to the user (same as built-in
%                           figure visibility property).
%                           DEFAULT: true
%
%   'XDim':                 INTEGER
%                           The scalar dimension of the data to be plotted along the x-axis of the montage.
%                           DEFAULT: 2 (for EEG data) OR 4 (for MRI data)
%
%   'XLabel':               STRING
%                           The x-axis label string (same as the built-in axes property). Just input the string here
%                           (using "set" or dot-notation) and it will automatically be added to the plot and colored.
%                           DEFAULT: []
%
%   'XTickLabel':           {STRINGS} or [DOUBLES]
%                           The x-axis tick labels (same as the built-in axes property). Just add the array or cell
%                           array of labels to this property (using "set" or dot-notation) and it will be automatically
%                           added to the plot and colored.
%                           DEFAULT: []
%
%   'YDim':                 INTEGER
%                           The scalar dimension of the data to be plotted along the y-axis of the montage.
%                           DEFAULT: 3 (for both EEG and MRI data)
%
%   'YLabel':               STRING
%                           The y-axis label string (same as the built-in axes property). Just add the array or cell
%                           array of labels to this property (using "set" or dot-notation) and it will be automatically
%                           added to the plot and colored.
%                           DEFAULT: []
%
%   'YTickLabel':           {STRINGS} or [DOUBLES]
%                           The y-axis tick labels (same as the built-in axes property). Just add the array or cell
%                           array of labels to this property (using "set" or dot-notation) and it will be
%                           automatically added to the plot and colored.
%                           DEFAULT: []

%% DEPENDENCIES
%
%   @windowObj
%   
%   assignInputs
%   istrue
%   scale2rgb
%   str2rgb

%% CHANGELOG
%   Written by Josh Grooms on 20130626
%       20130702:   Implemented MRI plotting capabilities. Also implemented anatomical underlay for thresholded images.
%       20130711:   Implemented a function for save figure images. Added documentation for "CLim" property.
%       20130717:   Set the default window position to screen center.
%       20130809:   Re-wrote the method TOGGLELISTENERS here (removed from WINDOWOBJ). Updated to work with re-written
%                   WINDOWOBJ.
%       20140625:   Removed dependencies on my personal file structure. Updated documentation. Changed some default 
%                   settings of the Store function and implemented file overwrite protection. 



    %% Brain Plot Properties
    
    properties (Dependent)
        AxesColor               % The color of the primary plot axes.
        XLabel                  % The x-axis label string.
        XTickLabel              % The individual x-axis tick labels.
        YLabel                  % The y-axis label string.
        YTickLabel              % The individual y-axis tick labels.
    end
    
    
    properties (SetObservable, AbortSet)
        Anatomical              % A 3D array containing an anatomical brain image.
        Channels                % A cell array of strings containing EEG channel labels.
        CLim                    % The [MIN, MAX] data values that are mapped to colormap extremes.
        ColorbarLabel           % A label string for the plot's colorbar.
        Threshold               % The [LOWER, UPPER] data thresholds.
        Title                   % The title string of the plot.
        XDim                    % The data dimension to be plotted along the x-axis.
        YDim                    % The data dimension to be plotted along the y-axis.
    end

    
    
    %% Constructor Method
    methods
        function H = BrainPlot(plotType, plotData, varargin)
            %BRAINPLOT Constructs a window object & initializes the plotting environment.
            
            % Initialize a window object for displaying the data
            H = H@Window(...
                'Color', 'k',...
                'Colormap', jet(256),...
                'MenuBar', 'off',...
                'NumberTitle', 'off',...
                'Position', WindowPositions.CenterCenter,...
                'Size', WindowSizes.FullScreen); drawnow

            if nargin ~= 0
                % Toggle listeners off during setup
                ToggleListeners(H);
                % Initialize the plot environment
                H = Initialize(H, plotType, plotData, varargin{:});
                % Plot the data
                Plot(H, plotType)
                % Toggle listeners back on
                ToggleListeners(H);
            end
        end
    end
    
    
    
    %% Public Methods
    methods
        % Store the image
        Store(brainData, varargin)
        % Toggle listeners on or off
        function ToggleListeners(brainData)
            for a = 1:length(brainData.Listeners)
                brainData.Listeners(a).Enabled = ~brainData.Listeners(a).Enabled;
            end
        end
    end
    
    
    
    %% Protected Methods
    methods (Access = protected)
        % Add listeners for changes to property values
        function createListeners(H)
            createListeners@windowObj(H);
            axesPropListener = addlistener(H, {...
                'AxesColor',...
                'Color',...
                'ColorbarLabel',...
                'Title',...
                'XDim',...
                'XLabel',...
                'XTickLabel',...
                'YDim',...
                'YLabel',...
                'YTickLabel'...
                }, 'PostSet', @(src, evt) H.UpdateAxes(src, evt));
            H.Listeners = [H.Listeners; axesPropListener];
        end
        % Initialize the plot
        brainData = Initialize(brainData, plotType, plotData, varargin)
        % Plot the data
        Plot(brainData, varargin)
        % Update axes properties as they change
        UpdateAxes(brainData, varargin)
    end
    
    
    
    %% Static Methods
    methods (Static)
        % Plot a single color map of EEG electrodes
        eegPlot(axHandle, inData, channels, strPlot)
        % Generate fused functional & anatomical images
        fusedImages = fuseImages(functionalImage, anatomicalImage, clim)
    end
end