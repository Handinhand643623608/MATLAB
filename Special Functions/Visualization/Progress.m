classdef Progress < Window
%PROGRESS Creates a fancy & easy to use progress bar to monitor function progress
%   This object is a replacement progress bar for the MATLAB built-in "waitbar" and others that might be found on
%   file-exchange. Unlike others, this progress bar uses multiple colors and smooth movements (with acceleration
%   effects). It is designed primarily for use in tracking progress through FOR loops.
%   
%   Multiple progress bars inside of a single window can be generated by inputting more than one bar title. This is
%   useful when tracking the progress of multiple nested loops. Each individual bar can be controlled independently of
%   one another.
%
%   Multiple windows may also be generated, each containing one or more progress bars. Window position is calculated
%   automatically so that individual windows do not overlap. This is useful for tracking progress in subfunctions while
%   another window tracks progress in the caller (super) function. All windows and individual bars can be controlled
%   independently of one another.
%
%   SYNTAX:
%   H = Progress(barTitle)
%   H = Progress(barTitle1, barTitle2,...)
%   H = Progress('-fast',...)
%
%   OUTPUT:
%   H:                  PROGRESS
%                       The handle of the progress bar object. To get the object properties, type the chosen output
%                       variable name in the console or, for more advanced properties, use the GET command on the
%                       object.
%
%   OPTIONAL INPUTS:
%   '-fast':            VERBATIM
%                       If the first input in the call to create a new progress bar is the string '-fast' (exactly as
%                       shown here), then the animation that appears to smoothly advance the progress bar will be turned
%                       off. This may be helpful in situations where you are unsure of the required time for a process
%                       or you wish to monitor the progress of a fairly rapid procedure. In such cases, the animation
%                       can introduce a considerable delay to your program and should be disabled.
%   
%   barTitle:           STRING or STRINGS
%                       A string (or multiple strings separated by commas) represeting the label to be applied to
%                       individual progress bars. The number of bar titles corresponds to the number of bars that are
%                       generated (i.e. three bar titles will result in three bars being generated).

%% CHANGELOG
%   Written by Josh Grooms on 20130215
%       20130801:   Updated entire object to be compatible with the re-write of WINDOWOBJ. Removed the "Shimmer" 
%                   property (I don't think this is doable elegantly in MATLAB). Removed changelog entries (see SVN for
%                   the complete listing).
%       20130803:   Users may now only input bar titles (others were never really used). Added a settings method so 
%                   users can change the default color scheme.
%       20130804:   Implemented estimated time remaining for overall progress.
%       20140806:   Completed a major overhaul of this program. Completely reorganized the class and removed public
%                   access several properties and methods. Incorporated compatibility with the upcoming WINDOW class
%                   update. Implemented the ability to dynamically add and remove bars from an existing window. Rewrote
%                   and cleaned up basically every method and placed them here in the definition file. Removed several
%                   methods and added several new ones. Removed all use of property change listeners.
%       20140829:   Bug fix for the close method still calling WINDOWOBJ instead of WINDOW. Bug fix for fast progress
%                   bar (i.e. with animation turned off) not working. Removed some unnecessary code. Implemented a
%                   default bar title when adding new bars dynamically to prevent erroring out. Updated documentation to
%                   discuss the '-fast' option.



    %% Progress Bar Properties
    properties (AbortSet)
        Complete;               % Percentage of task completed.
    end
    
    properties (Access = private, Hidden)
        Clock                   % Parameters relating to the estimation of remaining time.
        Patch                   % The patch data responsible for drawing the bars in the window.
        UseAnimation = true;    % A Boolean representing whether or not smooth animations are to be used.
    end
    
    
    
    %% Constructor Method
    methods
        function H = Progress(varargin)            
            %PROGRESS - Display a fancy progress bar derived from a window object.
            H = H@Window(...
                'Color', 'k',...
                'Colormap', cool(64),...
                'FigureNumber', 1000,...
                'MenuBar', 'none',...
                'NumberTitle', 'off',...
                'Name', 'Progress',...
                'Position', WindowPositions.UpperRight,...
                'Resizable', 'on',...
                'Size', [500, 100]); drawnow
            
            currentTime = now;
            H.Clock.Average = currentTime;
            H.Clock.LastTime = currentTime;
            H.Clock.NumIterations = 0;
            H.Text = struct('BarText', [], 'BarTitle', []);
            
            if nargin == 0; barTitle = {'Progress'};
            else 
                barTitle = varargin;
                if strcmpi(barTitle{1}, '-fast')
                    H.UseAnimation = false;
                    barTitle(1) = [];
                end
            end
            
            for a = 1:length(barTitle); AddBar(H, barTitle{a}); end

        end
    end
    
    
    
    %% Public Methods
    methods
        % Class methods
        function AddBar(H, barTitle)
            %ADDBAR - Add a new progress bar to the window.
            
            if nargin == 1; barTitle = 'Progress'; end
            innerFigPos = get(H.FigureHandle, 'Position');
            if isempty(H.Axes)
                newAxPos = [0.01*innerFigPos(3), 0.01*innerFigPos(4), 0.88*innerFigPos(3), 0.5*innerFigPos(4)];
            else
                newAxPos = get(H.Axes(end), 'Position');
                innerFigPos(4) = (innerFigPos(4)/length(H.Axes)) + innerFigPos(4);
                set(H.FigureHandle, 'Position', innerFigPos);
                H.TranslateBarPositions(2*newAxPos(4));
            end
            
            H.Axes = cat(1, H.Axes, Progress.newAxes(H.FigureHandle, newAxPos));
            H.Complete = cat(1, H.Complete, 0);
            H.Patch = cat(1, H.Patch, Progress.newBar(H.Axes(end)));
            H.Text.BarTitle = cat(1, H.Text.BarTitle, Progress.newTitle(H.Axes(end), barTitle));
            H.Text.BarText = cat(1, H.Text.BarText, Progress.newText(H.Axes(end), [max(get(H.Patch(end), 'XData')) + 1, 0]));
            H.Position = WindowPositions.UpperRight;
        end
        function RemoveBar(H)
            %REMOVEBAR - Remove the last progress bar from the window.
            origNumBars = length(H.Axes);
            delete(H.Patch(end));           H.Patch(end) = [];
            delete(H.Text.BarText(end));    H.Text.BarText(end) = [];
            delete(H.Text.BarTitle(end));   H.Text.BarTitle(end) = [];
            delete(H.Axes(end));            H.Axes(end) = [];
            
            innerFigPos = get(H.FigureHandle, 'Position');
            TranslateBarPositions(H, -(innerFigPos(4) / origNumBars));
            innerFigPos(4) = innerFigPos(4) - (innerFigPos(4) / origNumBars);
            set(H.FigureHandle, 'Position', innerFigPos);
            H.Position = WindowPositions.UpperRight;
        end
        function Reset(H, idxBar)
            %RESET - Reset one or more progress bars.
            if nargin == 1; idxBar = 1; end
            Update(H, idxBar, 0);
        end
        function Title(H, idxBar, barTitle)
            %TITLE - Change the title of a progress bar.
            set(H.Text.BarTitle(idxBar), 'String', barTitle);
        end
        function Update(H, varargin)
            %UPDATE - Change the completion percentage of the progress bar.
            if nargin == 2
                idxBar = 1;
                pctComplete = varargin{1};
            else
                idxBar = varargin{1};
                pctComplete = varargin{2};
            end
            
            if (pctComplete > 1); pctComplete = 1;
            elseif (pctComplete < 0); pctComplete = 0;
            end
            
            if (H.UseAnimation); UpdateAnimated(H, idxBar, pctComplete);
            else UpdateInstantly(H, idxBar, pctComplete);
            end
            
            if (idxBar == 1) && (pctComplete ~= 0); UpdateTimeRemaining(H, pctComplete); end
                
            H.Complete(idxBar) = pctComplete*100;
        end
        
        % Overloaded MATLAB methods
        function close(progData, varargin)
            evalin('caller', ['clear ' inputname(1)]);
            close@Window(progData, varargin{:});
        end
    end
    
    
    
    %% Private Methods
    methods (Access = private)
        function TranslateBarPositions(H, deltaY)
            for a = 1:length(H.Axes)
                newBarPos = get(H.Axes(a), 'Position');
                newBarPos(2) = newBarPos(2) + deltaY;
                set(H.Axes(a), 'Position', newBarPos);
            end
        end
        function UpdateAnimated(H, idxBar, pctComplete)
            % Calculate how far to advance the progress bar
            textPos = get(H.Text.BarText(idxBar), 'Position');
            xVertices = get(H.Patch(idxBar), 'XData');
            idxCap2 = 0.5*length(xVertices) + 1;
            diffPos = round(pctComplete*100) - xVertices(idxCap2);
            
            % Smoothly advance the progress bar & associated text
            movements = gausswin(50, 1/0.4);
            movements = movements.*(diffPos/sum(movements));
            for a = 1:length(movements)
                xVertices(idxCap2:end) = xVertices(idxCap2:end) + movements(a);
                textPos(1) = textPos(1) + movements(a);
                H.Complete(idxBar) = H.Complete(idxBar) + movements(a);
                newText = sprintf('%3.1f%%', H.Complete(idxBar));
                
                if (length(newText) >= 4) && (newText(4) == '.')
                    newText(4:5) = [];
                end
                
                set(H.Patch(idxBar), 'XData', xVertices);
                set(H.Text.BarText(idxBar), 'Position', textPos, 'String', newText);
                pause(0.0001);
            end
        end
        function UpdateInstantly(H, idxBar, pctComplete)
            % Calculate how far to advance the progress bar
            xVertices = get(H.Patch(idxBar), 'XData');
            idxCap2 = 0.5*length(xVertices) + 1;
            diffPos = round(pctComplete*100) - xVertices(idxCap2);
            xVertices(idxCap2:end) = xVertices(idxCap2:end) + diffPos;
            
            % Advance the progress bar & associated text
            set(H.Patch(idxBar), 'XData', xVertices);
            textPos = get(H.Text.BarText(idxBar), 'Position');
            textPos(1) = textPos(1) + diffPos;
            newText = sprintf('%3.1f%%', pctComplete*100);
            if newText(end) == '.'; newText(end) = []; end
            set(H.Text.BarText(idxBar), 'Position', textPos, 'String', newText);
            drawnow;
        end
        function UpdateTimeRemaining(H, pctComplete)
            %UPDATETIMEREMAINING - Updates the estimated remaining time for the first bar to reach 100%.
            currentTime = now;
            iterTime = currentTime - H.Clock.LastTime;
            numIterations = H.Clock.NumIterations + 1;
            avgIterTime = (iterTime + H.Clock.NumIterations * H.Clock.Average) / numIterations;
            itersRemaining = round(numIterations/pctComplete) - numIterations;
            timeRemaining = avgIterTime * itersRemaining;
            
            H.Clock.NumIterations = numIterations;
            H.Clock.LastTime = currentTime;
            H.Clock.Average = avgIterTime;
            H.Name = Progress.time2str(timeRemaining);
        end     
    end
    
    methods (Access = private, Static)
        % New progress bar elements
        function a = newAxes(f, position)
            %NEWAXES - Create new axes to contain the progress bar drawing.
            a = axes(...
                'Units', 'pixels',...
                'Color', ToArray(Color.Black),...
                'Parent', f,...
                'Position', position,...
                'XLim', [-4, 104],...
                'XTick', [],...
                'YLim', [-1.25, 1.25],...
                'YTick', []);
        end
        function b = newBar(a)
            %NEWBAR - Create a new progress bar patch object.
            theta1 = linspace(pi/2, 3*pi/2, 100);
            circleX1 = 3*cos(theta1);
            circleY1 = 0.85*sin(theta1);
            theta2 = linspace(-pi/2, pi/2, 100);
            circleX2 = max(circleX1) + 3*cos(theta2);
            circleY2 = 0.85*sin(theta2);
            
            b = patch([circleX1, circleX2], [circleY1, circleY2], 1:length([circleX1, circleX2]),...
                'FaceColor', 'interp',...
                'EdgeColor', 'none',...
                'Parent', a);
        end
        function t = newText(a, position)
            %NEWTEXT - Create new text for diplaying the completion percentage of a progress bar.
            t = text(...
                'Units', 'data',...
                'Color', 'w',...
                'FontSize', 10,...
                'FontWeight', 'bold',...
                'HorizontalAlignment', 'left',...
                'Parent', a,...
                'Position', position,...
                'String', '0.0%');
        end
        function t = newTitle(a, str)
            %NEWTITLE - Create new text for displaying the title of a progress bar.
            t = text(...
                'Units', 'data',...
                'Color', 'w',...
                'FontSize', 12,...
                'FontWeight', 'bold',...
                'Parent', a,...
                'Position', [-3, 2.25],...
                'String', str);
        end
        
        % Other functions
        function timeStr = time2str(timeNum)
            %TIME2STR - Converts estimated time remaining into a string used for the window title.
            warning('off', 'MATLAB:callback:error');
            timeStr = datestr(timeNum, 'DDHHMMSS');
            timeCell = {timeStr(1:2), 'days', timeStr(3:4), 'hrs', timeStr(5:6), 'min', timeStr(7:8), 's'};
            
            while true
                if isempty(timeCell)
                    timeStr = 'Done!';
                    return;
                elseif strcmpi(timeCell{1}, '00'); 
                    timeCell(1:2) = [];
                    continue;
                else
                    printStr = repmat('%s ', 1, length(timeCell));
                    timeStr = sprintf([printStr 'Remaining'], timeCell{:});
                    return;
                end
            end
        end
    end
    
    
    
end
    
    
        