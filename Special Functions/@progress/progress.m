classdef progress < windowObj
%PROGRESS Creates a fancy & easy to use progress bar to monitor function progress
%   This object is a replacement progress bar for the MATLAB built-in "waitbar" and others that might be found on
%   file-exchange. Unlike others, this progress bar uses multiple colors and smooth movements (with acceleration
%   effects). It is designed primarily for use in tracking progress through FOR loops.
%   
%   Multiple progress bars inside of a single window can be generated by inputting more than one bar title. This is
%   useful when tracking the progress of multiple nested loops. Each individual bar can be controlled independently of
%   one another.
%
%   Multiple windows may also be generated, each containing one or more progress bars. Window position is calculated
%   automatically so that individual windows do not overlap. This is useful for tracking progress in subfunctions while
%   another window tracks progress in the caller (super) function. All windows and individual bars can be controlled
%   independently of one another.
%
%   SYNTAX:
%   progressBar = progress(barTitle)
%   progressBar = progress(barTitle1, barTitle2,...)
%
%   OUTPUT:
%   progressBar:        PROGRESS
%                       The handle of the progress bar object. To get the object properties, type the chosen output
%                       variable name in the console or, for more advanced properties, use the GET command on the
%                       object.
%
%   OPTIONAL INPUT:
%   barTitle:           STRING
%                       A string (or multiple strings separated by commas) represeting the label to be applied to
%                       individual progress bars. The number of bar titles corresponds to the number of bars that are
%                       generated (i.e. three bar titles will result in three bars being generated).

%% CHANGELOG
%   Written by Josh Grooms on 20130215
%       20130801:   Updated entire object to be compatible with the re-write of WINDOWOBJ. Removed the "Shimmer" 
%                   property (I don't think this is doable elegantly in MATLAB). Removed changelog entries (see SVN for
%                   the complete listing).
%       20130803:   Users may now only input bar titles (others were never really used). Added a settings method so 
%                   users can change the default color scheme.
%       20130804:   Implemented estimated time remaining for overall progress.

    

    %% Progress Bar Properties
    properties (SetObservable, AbortSet)
        BarTitle           % Title of the progress bar in the window.
        Complete           % Percentage of task completed.
        Fast               % A Boolean representing whether or not smooth animations are to be used.
        Parallel           % A Boolean indicating whether or not parallel processing is active.
        Clock              % Parameters relating to the estimation of remaining time.
    end
    
    
    
    %% Constructor Method
    methods
        function progData = progress(varargin)            
            %PROGRESS Display a fancy progress bar derived from a window object.
            % Initialize a window object
            progData = progData@windowObj(...
                'Color', 'k',...
                'FigureNumber', 1000,...
                'MenuBar', 'none',...
                'NumberTitle', 'off',...
                'Name', 'Progress',...
                'Position', 'upper-right',...
                'Resizable', 'on',...
                'Size', [500, 100]); drawnow
            % Initialize the progress bars
            initialize(progData, varargin{:});
            % Create listeners for property changes
            createListeners(progData);
        end
    end
    
    
    
    %% Public Methods
    methods
        % Close the progress bar & delete existing logs
        function close(progData, varargin)
            if exist('tempProg.txt', 'file'); delete('tempProg.txt'); end
            evalin('caller', ['clear ' inputname(1)]);
            close@windowObj(progData, varargin{:});
        end
        % Reset the progress bar
        function reset(progData, barNum)
            if nargin == 1
                progData.Complete = zeros(1, length(progData.Complete));
            else
                progData.Complete(barNum) = 0;
            end
        end
        % Overload "get" for property name compatibility
        propData = get(progData, varargin)
        % Overload "set" for property name compatibility
        set(progData, varargin)
        % Progress bar settings
        settings(progData)
        % Update the progress bar
        update(progData, varargin)
    end
    
    
    
    %% Private Methods
    methods (Access = protected)
        % Add listeners for property changes
        function createListeners(progData)
            % Create listener objects
            dataListener = addlistener(progData, {'Complete'}, 'PostSet',...
                @(src, evt) progData.update('source', src, 'event', evt));
            titleListener = addlistener(progData, {'BarTitle'}, 'PostSet',...
                @(src, evt) progData.update('source', src, 'event', evt));
            listenerHandles = [progData.Listeners; dataListener; titleListener];
            progData.Listeners = listenerHandles;
        end
        % Initialize the progress bar data
        initialize(progData, varargin)
    end
    
    
    
end
    
    
        