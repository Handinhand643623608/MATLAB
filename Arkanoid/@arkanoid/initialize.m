function initialize(arkData)
%INITIALIZE Prepares the Arkanoid game space, the HUD, and various GUI elements.
%
%   Written by Josh Grooms on 20130516
%       20130521:   Removed GUI push buttons & replaced with menus. Implemented persistent settings
%                   for window size & user control options. Implemented a scoring system & display.
%                   Implemented a level system & display.
%       20130601:   Updated coloring scheme for score & level displays. Switched ordering of current
%                   & high scores. Implemented multiple lives into the game. Updated the help
%                   section of this file.
%       20130603:   Implemented a reset function for the high score. Command is found under the
%                   "Settings" game menu.
%       20130802:   Moved superclass initialization here to make sure it happens first. Changed some
%                   references to superclass properties for compatibility with WINDOWOBJ re-write.
%       20150824:   Updated for compatibility with cumulative changes to the WINDOW class over the past year and for
%                   compatibility with Unix file systems.


%% Initialize
% Important variables
posAxes = [0.175 0.11 0.775 0.815];
settingsDir = which('arkanoid/settings');
settingsDir = strrep(settingsDir, '/settings.m', '');
gameDir = which('arkanoid/runGame.m');
gameDir = strrep(gameDir, '/runGame.m', '');


%% Setup the Game Environment
% Set callbacks to allow for mouse control
set(arkData.FigureHandle, 'WindowButtonDownFcn', @(src, evt) arkData.clickFcn(src, evt));
set(arkData.FigureHandle, 'WindowButtonUpFcn', @(src, evt) arkData.Paddle.releaseFcn(src, evt));

% Set a callback to delete variables when the window is closed
set(arkData.FigureHandle, 'DeleteFcn', @(src, evt) arkData.close('source', src, 'event', evt));

% Generate axes for the figure
arkData.Axes = axes(...
    'Box',          'on',...
    'Color',        'k',...
    'LineWidth',    2,...
    'NextPlot',     'add',...
    'Position',     posAxes,...
    'XColor',       'b',...
    'XLim',         [0 1],...
    'XTick',        [],...
    'YColor',       'b',...
    'YLim',         [0 1],...
    'YTick',        []);

% Restore previous window settings
if exist([settingsDir '/settings.mat'], 'file')
    load([settingsDir '/settings.mat']);
    arkData.Resize = 'on';
    arkData.Size = setStruct.WindowSize;
    arkData.Position = WindowPositions.CenterCenter;
    arkData.Resize = 'off';
    % set(arkData, 'Resizable', 'on', 'Size', setStruct.WindowSize, 'Position', 'top-right');
    % set(arkData, 'Resizable', 'off');
end


%% Create a Game Menu
arkData.Menus.Game = uimenu(arkData.FigureHandle,...
    'Label', 'Game');
uimenu(arkData.Menus.Game,...
    'Label', 'Reset Level',...
    'Accelerator', 'L',...
    'Callback', @(src, evt) arkData.resetLevel(src, evt));
uimenu(arkData.Menus.Game,...
    'Label', 'Reset Game',...
    'Accelerator', 'R',...
    'Callback', @(src, evt) arkData.reset(src, evt));
uimenu(arkData.Menus.Game,...
    'Label', 'Exit',...
    'Separator', 'on',...
    'Accelerator', 'Q',...
    'Callback', @(src, evt) arkData.close(src, evt));


%% Create a Settings Menu
% Window Size
arkData.Menus.Settings.Main = uimenu(arkData.FigureHandle, 'Label', 'Settings');
arkData.Menus.Settings.Window = uimenu(arkData.Menus.Settings.Main, 'Label', 'Window Size');
setLabels = {'Quarter Screen', 'Half Screen', 'Full Screen'};
for a = 1:length(setLabels)
    uimenu(arkData.Menus.Settings.Window, 'Label', setLabels{a}, 'Callback', @(src, evt) arkData.settings(src, evt));
end

% Input method
arkData.Menus.Settings.Input = uimenu(arkData.Menus.Settings.Main, 'Label', 'Input');
uimenu(arkData.Menus.Settings.Input, 'Label', 'Keyboard', 'Callback', @(src, evt) arkData.settings(src, evt));
uimenu(arkData.Menus.Settings.Input, 'Label', 'Mouse', 'Callback', @(src, evt) arkData.settings(src, evt));

% Miscellaneous
uimenu(arkData.Menus.Settings.Main, 'Label', 'Reset High Score', 'Callback', @(src, evt) arkData.settings(src, evt));


%% Create a Scoring Feature
% Show the high score
if exist([gameDir '/highScore.mat'], 'file')
    load([gameDir '/highScore.mat'])
else
    highScore = 0;
end

% Position the text elements
wTxt = posAxes(1) - 0.01;
hTxt = 0.075;
xTxt = (posAxes(1) - wTxt)/2;

% Show the current score
posCurrentTxt = [xTxt posAxes(2) wTxt hTxt];
uicontrol(arkData.FigureHandle,...
    'Units',                'normalized',...
    'Style',                'text',...
    'BackgroundColor',      arkData.Background,...
    'FontName',             'OCR A Extended',...
    'FontUnits',            'normalized',...
    'FontSize',             0.5,...
    'ForegroundColor',      'b',...
    'Position',             posCurrentTxt,...
    'String',               'Current');
posCurrentTxt(2) = posCurrentTxt(2) + posCurrentTxt(4);
arkData.Score.Current = uicontrol(arkData.FigureHandle,...
    'Units',                'normalized',...
    'Style',                'text',...
    'BackgroundColor',      arkData.Background,...
    'FontName',             'OCR A Extended',...
    'FontUnits',            'normalized',...
    'FontSize',             0.75,...
    'ForegroundColor',      'g',...
    'Position',             posCurrentTxt,...
    'String',               '0000');

% Create the high score element
posHighTxt = [posCurrentTxt(1) posCurrentTxt(2)+posCurrentTxt(4) posCurrentTxt(3) posCurrentTxt(4)];
uicontrol(arkData.FigureHandle,...
    'Units',                'normalized',...
    'Style',                'text',...
    'BackgroundColor',      arkData.Background,...
    'FontName',             'OCR A Extended',...
    'FontUnits',            'normalized',...
    'FontSize',             0.5,...
    'ForegroundColor',      'b',...
    'Position',             posHighTxt,...
    'String',               'High');
posHighTxt(2) = posHighTxt(2) + posHighTxt(4);
arkData.Score.High = uicontrol(arkData.FigureHandle,...
    'Units',                'normalized',...
    'Style',                'text',...
    'BackgroundColor',      arkData.Background,...
    'FontName',             'OCR A Extended',...
    'FontUnits',            'normalized',...
    'FontSize',             0.75,...
    'ForegroundColor',      [0 0.75 1],...
    'Position',             posHighTxt,...
    'String',               sprintf('%04d', highScore));


%% Create a Level Feature
% Position the level element
hTxt = 0.175;
yTxt = posAxes(2) + posAxes(4) - hTxt;

% Create the level element
posLvlTxt = [xTxt yTxt wTxt hTxt];
arkData.Level = uicontrol(arkData.FigureHandle,...
    'Units',                'normalized',...
    'Style',                'text',...
    'BackgroundColor',      arkData.Background,...
    'FontName',             'OCR A Extended',...
    'FontUnits',            'normalized',...
    'FontSize',             1,...
    'ForegroundColor',      [0 0.75 1],...
    'Position',             posLvlTxt,...
    'String',               '01');
posLvlTxt = [xTxt yTxt-posHighTxt(4) wTxt posHighTxt(4)];
uicontrol(arkData.FigureHandle,...
    'Units',                'normalized',...
    'Style',                'text',...
    'BackgroundColor',      arkData.Background,...
    'FontName',             'OCR A Extended',...
    'FontUnits',            'normalized',...
    'FontSize',             0.5,...
    'ForegroundColor',      'b',...
    'Position',             posLvlTxt,...
    'String',               'Level');


%% Create Multiple Lives
% Initialize variables
numLives = length(arkData.Lives);
ballDir = which('ball/ball');
ballDir = strrep(ballDir, 'ball.m', '');
ballTexture = imread([ballDir '/Ball.tif']);

% Position the lives display
xLives = posAxes(1)/3;
yLives = posLvlTxt(2) - 0.5*posLvlTxt(4);
wLives = xLives;
hLives = 0.3*posLvlTxt(4);
posLivesAxes = [xLives yLives wLives hLives];
livesAxes = axes(...
    'Box',          'off',...
    'Color',        'k',...
    'NextPlot',     'add',...
    'Position',     posLivesAxes,...
    'XLim',         [0 1],...
    'XTick',        [],...
    'YLim',         [0 1],...
    'YTick',        []);

% Position the lives display
tempLives = zeros(1, numLives);
for a = 1:numLives
    currentX = (a-1)*(1/numLives);
    currentXData = [currentX currentX+(1/numLives)];
    currentYData = [0.01 0.99];
    tempLives(a) = image(...
        currentXData,...
        currentYData,...
        ballTexture,...
        'Parent', livesAxes);
end
arkData.Lives = tempLives;
clear current* temp*
