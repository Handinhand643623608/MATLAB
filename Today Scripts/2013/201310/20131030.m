%% 20131030


%% 0847 - Nuisance Signals are Still Not Being Generated Properly
functionalData = boldData(1).Data.Functional;
szData = size(functionalData);
meanCutoff = boldData(1).Preprocessing.Parameters.Conditioning.MeanCutoff;

functionalData = reshape(functionalData, [], szData(4));

% Regress the motion & global signals
motionSig = boldData(1).Data.Nuisance.Motion;
globSig = boldData(1).Data.Nuisance.Global;
functionalData = (functionalData' - motionSig'*(motionSig'\functionalData'))';
functionalData = (functionalData' - globSig'*(globSig'\functionalData'))';

% Find the WM signal
wmSeg = boldData(1).Data.Segments.WM;
wmSeg = reshape(wmSeg, [], 1);
wmSig = nanmean(functionalData(wmSeg > meanCutoff, :), 1);

% Regress the WM signal
functionalData = (functionalData' - wmSig'*(wmSig'\functionalData'))';

% Find the CSF signal
csfSeg = boldData(1).Data.Segments.CSF;
csfSeg = reshape(csfSeg, [], 1);
csfSeg = nanmean(functionalData(csfSeg > meanCutoff, :), 1);


%% 1627 - Need to Redo All of the Nuisance Signal Generation for Everything
% Nuisance data hasn't been generated properly for any of the BOLD data. After fixing everything in
% the preprocessing algorithm earlier this year, I neglected to fix the exact same problem in the
% generateNuisance method for BOLD object.

% Load DC BOLD data and redo nuisance generation
load masterStructs
boldFiles = get(fileData([fileStruct.Paths.DataObjects '/BOLD'], 'Search', 'dcZ'), 'Path');
progBar = progress('Generating BOLD Nuisance Data');
for a = 1:length(boldFiles)
    load(boldFiles{a});
    generateNuisance(boldData);
    store(boldData);
    update(progBar, a/length(boldFiles));
end
close(progBar)


%% 1702 - Now Need to Redo Some of the Correlations I Did Yesterday
% No nuisance signals are being regressed from BOLD, so this should give an idea as to the extent of
% each nuisance parameter. See entry 1914 in yesterday's script for more context.

% Setup correlation parameters
ccStruct = struct(...
    'Initialization', struct(...
        'Bandwidth', {{[0.01 0.08], [0.01 0.08]}},...
        'GSR', [false false],...
        'Modalities', 'BOLD-BOLD Nuisance',...
        'Relation', 'Correlation',...
        'ScanState', 'RS'),...
    'Correlation', struct(...
        'Control', 'BOLD Nuisance',...
        'Channels', [],...
        'Fs', 0.5,...
        'GenerateNull', false,...
        'Mask', [],...
        'MaskThreshold', [],...
        'Scans', [],...
        'Subjects', [],...
        'TimeShifts', [-20:2:20]),...
    'Thresholding', struct(...
        'AlphaVal', 0.05,...
        'CDFMethod', 'arbitrary',...
        'FWERMethod', 'sgof',...
        'Mask', [],...
        'MaskThreshold', [],...
        'Parallel', 'gpu',...
        'Tails', 'both'));
corrData = corrObj(ccStruct);
store(corrData);
meanCorrData = mean(corrData);
store(meanCorrData);
brainData = plot(meanCorrData, 'CLim', [-3 3]);


%% 1740 - Re-Running The Above Correlations, This Time Regressing Nuisance Signals from BOLD Data Prior to Correlation
% I've done this in code, so it won't be visible in the parameters below.
% Setup correlation parameters
ccStruct = struct(...
    'Initialization', struct(...
        'Bandwidth', {{[0.01 0.08], [0.01 0.08]}},...
        'GSR', [false false],...
        'Modalities', 'BOLD-BOLD Nuisance',...
        'Relation', 'Correlation',...
        'ScanState', 'RS'),...
    'Correlation', struct(...
        'Control', 'BOLD Nuisance',...
        'Channels', [],...
        'Fs', 0.5,...
        'GenerateNull', false,...
        'Mask', [],...
        'MaskThreshold', [],...
        'Scans', [],...
        'Subjects', [],...
        'TimeShifts', [-20:2:20]),...
    'Thresholding', struct(...
        'AlphaVal', 0.05,...
        'CDFMethod', 'arbitrary',...
        'FWERMethod', 'sgof',...
        'Mask', [],...
        'MaskThreshold', [],...
        'Parallel', 'gpu',...
        'Tails', 'both'));
corrData = corrObj(ccStruct);
store(corrData);
meanCorrData = mean(corrData);
store(meanCorrData);
brainData = plot(meanCorrData, 'CLim', [-3 3]);
store(brainData, 'ext', {'fig', 'png'});


%% 1818 - RSN-EEG Correlations using EEG CSR
% Setup correlation parameters
ccStruct = struct(...
    'Initialization', struct(...
        'Bandwidth', {{[0.01 0.08], [0.01 0.08]}},...
        'GSR', [false true],...
        'Modalities', 'RSN-EEG',...
        'Relation', 'Partial Correlation',...
        'ScanState', 'RS'),...
    'Correlation', struct(...
        'Control', 'BOLD Nuisance',...
        'Channels', [],...
        'Fs', 0.5,...
        'GenerateNull', false,...
        'Mask', [],...
        'MaskThreshold', [],...
        'Scans', {{[1 2] [1 2] [1 2] [1 2] [1 2] [1 2] [1 2] [1 2]}},...      % <--- No ICA time courses for subject 6 scan 3
        'Subjects', [1:8],...
        'TimeShifts', [-20:2:20]),...
    'Thresholding', struct(...
        'AlphaVal', 0.05,...
        'CDFMethod', 'arbitrary',...
        'FWERMethod', 'sgof',...
        'Mask', [],...
        'MaskThreshold', [],...
        'Parallel', 'gpu',...
        'Tails', 'both'));
corrData = corrObj(ccStruct);
store(corrData)
meanCorrData = mean(corrData);
store(meanCorrData)
brainData = plot(meanCorrData, 'CLim', [-3 3]);
store(brainData, 'ext', {'fig', 'png'});
close(brainData)
clear corrData

% Threshold the data
threshold(meanCorrData);
store(meanCorrData)
brainData = plot(meanCorrData, 'Thresholding', 'on', 'CLim', [-3 3]);
store(brainData, 'ext', {'fig', 'png'});
close(brainData)


%% 2135 - Re-Running BOLD-EEG Partial Correlations (Using EEG CSR, No Thresholding For Now)
% Need to test whether or not the failed nuisance signal generation before had a significant impact
% on results. If so, everything will need to be re-done. Going to do this by running correlations
% without significance thresholding, which is fairly quick.

% Correlation Parameters
load masterStructs
gmMask = load_nii(fileStruct.Files.Segments.Gray); gmMask = gmMask.img;
channels = {'C3', 'FPZ', 'PO8', 'PO10', 'AF7'};
ccStruct = struct(...
    'Initialization', struct(...
        'Bandwidth', {{[0.01 0.08], [0.01 0.08]}},...
        'GSR', [false true],...
        'Modalities', 'BOLD-EEG',...
        'Relation', 'Partial Correlation',...
        'ScanState', 'RS'),...
    'Correlation', struct(...
        'Control', 'BOLD Nuisance',...
        'Channels', [],...
        'Fs', 0.5,...
        'GenerateNull', false,...
        'Mask', [],...
        'MaskThreshold', [],...
        'Scans', [],...
        'Subjects', [],...
        'TimeShifts', [-20:2:20]),...
    'Thresholding', struct(...
        'AlphaVal', 0.05,...
        'CDFMethod', 'arbitrary',...
        'FWERMethod', 'sgof',...
        'Mask', gmMask,...
        'MaskThreshold', 0.7,...
        'Parallel', 'gpu',...
        'Tails', 'both'));
    
progBar = progress('Running Partial Correlations');
for a = 2:length(channels)
    ccStruct.Correlation.Channels = channels(a);
    corrData = corrObj(ccStruct);
    store(corrData);
    meanCorrData = mean(corrData);
    store(meanCorrData);
    brainData = plot(meanCorrData, 'CLim', [-3 3]);
    store(brainData, 'ext', {'fig', 'png'});
    close(brainData)
    clear corrData meanCorrData;
    update(progBar, a/length(channels));
end
close(progBar);


%% 2308 - No Differences Found. No Thresholding Needed
% Fortunately, there appears to be no practical difference between the old data and the new data
% generated immediately above. Therefore, there's no need to threshold the new data. 