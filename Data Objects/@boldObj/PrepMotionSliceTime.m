function PrepMotionSliceTime(boldData)
%PREPMOTIONSLICETIME Executes motion & slice timing correction using AFNI.
%   This function corrects for motion artifacts and slice timing acquisition effects using AFNI software. It is
%   currently only compatible with computers running the Linux operating system.
%
%   SYNTAX:
%   PrepMotionSliceTime(boldData)
%
%   INPUT:
%   boldData:       BOLDOBJ
%                   A single BOLD data object undergoing preprocessing.



%% CHANGELOG
%   Written by Josh Grooms on 20130707
%       20130708:   Several bug fixes to main functionality.
%       20140623:   Implemented a fix for using compressed .BRIK files generated by newer versions of AFNI. In this
%                   case, the extensions of some needed files are changed whenever AFNI outputs data.
%       20140720:   Added in the option to turn off slice-timing corrections. This shouldn't be used on data sets with
%                   fast TRs.



%% Intialize
% Get parameters from the data structure
functionalFolder = boldData.Preprocessing.Folders.Functional;
functionalDicoms = get(fileData(functionalFolder, 'ext', '.dcm'), 'Path');
numSlices = boldData.Acquisition.NumberOfSlices;
TR = boldData.Acquisition.RepetitionTime;
dcmInfo = dicominfo(boldData.Preprocessing.Files.MeanDCM);
useSTC = boldData.Preprocessing.Parameters.General.UseSliceTimingCorrection;

% Determine AFNI parameters
ignoreIndex = 15;
if mod(numSlices, 2) == 0
    order = 'alt+z2';
else
    order = 'alt+z';
end

% Generate an output file name
outputFile = dcmInfo.ProtocolName;

% Delete old files with the same name
extStrs = {'.BRIK', '.BRIK.GZ', '.HEAD', '.1D'};
for a = 1:length(extStrs)
    delete([functionalFolder '/' outputFile '*' extStrs{a}])
    delete([functionalFolder '/' 'mean/*' extStrs{a}])
end

% Store the current directory to easily switch back after processing
origDir = pwd;



%% AFNI Preprocess the BOLD Data
% Convert functional data to AFNI format
cd(functionalFolder);
systemCommand = sprintf('to3d -epan -time:zt %d %d %f %s -prefix %s *.dcm',...
    numSlices, length(functionalDicoms), TR, order, outputFile);
system(systemCommand);

% Convert mean image to AFNI format
cd('Mean')
systemCommand = sprintf('to3d -epan -time:zt %d %d %f %s -prefix %s *.dcm',...
    numSlices, 0, TR, order, 'mean');
system(systemCommand);
meanBRIK = get(fileData(pwd, 'Ext', '.BRIK', 'ErrorOnEmpty', false), 'Path');

% If a BRIK file can't be found, check for compressed BRIK files (AFNI can now compress outputted data)
if isempty(meanBRIK{1})
    meanBRIK = get(fileData(pwd, 'Ext', '.gz'), 'Path');
    meanBRIK = strrep(meanBRIK{1}, '.BRIK.gz', '');
else
    meanBRIK = strrep(meanBRIK{1}, '.BRIK', '');
end

% Slice timing correction in AFNI
cd ..
stcQualifier = '';
if istrue(useSTC)
    systemCommand = sprintf('3dTshift -Fourier -ignore %d -prefix %s_tshift %s+orig',...
        ignoreIndex, outputFile, outputFile);
    system(systemCommand);
    stcQualifier = '_tshift';
end

% Volume registration (I think???)
systemCommand = sprintf('3dvolreg -base ''%s''[0] -Fourier -noclip -1Dfile %s.1D -maxdisp1D %s.maxdisp -prefix %s%s_reg %s%s+orig',...
    meanBRIK, outputFile, outputFile, outputFile, stcQualifier, outputFile, stcQualifier);
system(systemCommand);

% Return to the original directory
cd(origDir)